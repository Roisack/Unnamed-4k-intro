const char* perlinNoise_vs =
"varying vec2 texCoord;"
"varying vec4 v_color;"
"uniform float time;"
"void main()"
"{"
"    texCoord = gl_MultiTexCoord0.xy;"
"	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;"
"    v_color = gl_Color;"
"}";
const char* perlinNoise_fs =
"uniform sampler2D baseNoise;"
"varying vec2 texCoord;"
"uniform float time;"
"varying vec4 v_color;"
"int size_x = 1024;"
"int size_y = 1024;"
"float magicNumber1 = 0.5;"
"float magicNumber2 = 0.5;"
"int octaveSetter = 10;"
"float amplitude = 0.9;"
"float persistence = 0.4;"
"float interpolate(float x0, float x1, float alpha)"
"{"
"    float interpolation = x0 * (1.0 - alpha) + alpha * x1;"
"    return interpolation;"
"}"
"float noise2(vec2 input_coords, int octave)"
"{"
"    float out1 = 0.0f;"
"    float i = input_coords.s;"
"    float j = input_coords.t;"
"    int i_resize = int(input_coords.s * size_x);"
"    int j_resize = int(input_coords.t * size_y);"
"    int samplePeriod = 1 << octave;"
"    float frequency = 1.0f / samplePeriod;"
"    int sample_i0 = (i_resize / samplePeriod) * samplePeriod;"
"    int sample_i1 = (sample_i0 + samplePeriod) % size_x;"
"    float horizontal_blend = (i_resize - sample_i0) * frequency;"
"    int sample_j0 = (j_resize / samplePeriod) * samplePeriod;"
"    int sample_j1 = int(sample_j0 + samplePeriod) % size_y;"
"    float vertical_blend = (j_resize - sample_j0) * frequency;"
"    float coord1 = float(sample_i0) / 1024;"
"    float coord2 = float(sample_i1) / 1024;"
"    float coord3 = float(sample_j0) / 1024;"
"    float coord4 = float(sample_j1) / 1024;"
"    float top = interpolate(texture2D(baseNoise, vec2(coord1,coord3)).r, texture2D(baseNoise, vec2(coord2, coord3)).r, horizontal_blend);"
"    float bottom = interpolate(texture2D(baseNoise, vec2(coord1, coord4)).r, texture2D(baseNoise, vec2(coord2, coord4)).r, horizontal_blend);"
"    out1 = interpolate(top, bottom, vertical_blend);"
"    return out1;"
"}"
"float filterValue(float v, float filter)"
"{"
"    if (v >= filter)"
"        return v;"
"    else"
"        return 0.0f;"
"}"
"void main()"
"{"
"    float noiseOctaves[20];"
"    float persistence_copy = persistence;"
"    float amplitude_copy = sin(time/10);"
"    float totalAmplitude = 0.0f;"
"    float n;"
"    float perlinNoise = 0.0f;"
"    vec4 col;"
"    for (int i = 0; i < octaveSetter && i < 20; i++)"
"    {"
"        noiseOctaves[i] = noise2(texCoord.st, i);"
"    }"
"    for (int i = octaveSetter-1; i >= 0; i--)"
"    {"
"        amplitude_copy *= persistence_copy;"
"        totalAmplitude += amplitude_copy;"
"        perlinNoise += (noiseOctaves[i] * amplitude_copy);"
"    }"
"    "
"    col = perlinNoise;"
"    gl_FragColor = col;"
"}";
